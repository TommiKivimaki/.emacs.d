#+STARTUP: overview
#+TITLE: Emacs literate configuration
#+AUTHOR: Tommi Kivim√§ki
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>

* Basics

** Configure package repos

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
			 ("marmalade" . "https://marmalade-repo.org/packages/")))
#+END_SRC



** Packages to be installed

#+BEGIN_SRC emacs-lisp
(defvar my-packages '(beacon
          company
		      dired-narrow
          dockerfile-mode
          htmlize
          epresent
		      flycheck
          ido-vertical-mode
          js2-mode
		      magit
		      markdown-mode
          org-bullets
          ox-reveal
          ox-gfm
          pdf-tools
          restclient
		      swift-mode
		      web-mode
          which-key
          yaml-mode))

;; To get pdf-tools installed
;;; pdf-tools installed first via homebrew
;;; brew install --HEAD dunn/homebrew-emacs/pdf-tools
;;; Then mactex installed
;;; brew cask install mactex
#+END_SRC

Installing packages

#+BEGIN_SRC emacs-lisp
(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-refresh-contents)
    (package-install p))
  (add-to-list 'package-selected-packages p))
#+END_SRC


** Setting a theme

#+BEGIN_SRC emacs-lisp
(load-theme 'tango-dark)
#+END_SRC



** Configuring the window

Display line numbers
#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
#+END_SRC

Set default window size
#+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
   (progn
     (setq initial-frame-alist
	    '(
	      (tool-bar-lines . 0)
	      (width . 170)
	      (height . 92)))
     (setq default-frame-alist
	    '(
	      (tool-bar-lines . 0)
	      (width . 170)
	      (height . 92))))
 (progn
   (setq initial-frame-alist '((tool-bar-lines . 0)))
   (setq default-frame-alist '((tool-bar-lines . 0)))))
#+END_SRC

Change font size
#+BEGIN_SRC emacs-lisp
(defun zoom-in ()
  (interactive)
  (let ((x (+ (face-attribute 'default :height)
	      10)))
    (set-face-attribute 'default nil :height x)))

(defun zoom-out ()
  (interactive)
  (let ((x (- (face-attribute 'default :height)
	      10)))
    (set-face-attribute 'default nil :height x)))

(define-key global-map (kbd "C-1") 'zoom-in)
(define-key global-map (kbd "C-0") 'zoom-out)
#+END_SRC

Disable scroll bar
#+BEGIN_SRC emacs-lisp
;;(scroll-bar-mode -1)
#+END_SRC

Remember cursor position when reopening files
#+BEGIN_SRC emacs-lisp
(setq save-place-file (expand-file-name "places" user-emacs-directory))
(setq save-place-forget-unreadable-files nil)
(save-place-mode 1)
#+END_SRC

Enable narrow-to-region mode. "C-x n n" Restrict editing in this
buffer to current region.
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC

Use visual bell instead of audio bell
#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC



** Beacon (part of window config)
[[https://github.com/Malabarba/beacon][Beacon]]
Visual cursor position when scrolling and jumping
#+BEGIN_SRC emacs-lisp
(beacon-mode 1)
(setq beacon-blink-duration 0.8)
#+END_SRC



** Emacs system configuration
Set garbage collection to 20MB instead of 0.76MB default.
Speeds up certain operations

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

Direct auto save files
#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

Set back-up directory
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
 					(concat user-emacs-directory "backups")))))
#+END_SRC

Set how many backups are stored
#+BEGIN_SRC emacs-lisp
(setq make-backup-files t
     backup-by-copying t
     delete-old-versions t
     kept-new-versions 2
     kept-old-versions 3
     version-control t)
#+END_SRC

Allow following symlinks
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

Enable using right side ALT as a modifier and not META key
#+BEGIN_SRC emacs-lisp
(setq mac-option-key-is-meta t)
(setq mac-right-option-modifier nil)
#+END_SRC

Get rid of start-up screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC


iBuffer configuration. CC mode is not installed and it's missing here
too.
Shortcut is C-x C-b
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer-other-window)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

;; Define a filter group
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("Magit" (mode . magit-mode))
                 ("web" (or
                 (mode . web-mode)
                 (mode . js2-mode)
                 (mode . css-mode)))
                 ("shell" (or
                 (mode . eshell-mode)
                 (mode . shell-mode)))
                 ("programming" (or
                                 (mode . python-mode)
                                 (mode . swift-mode)
                                 (mode . c++-mode)))

                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
            ;; Automatically keep buffer list updated
            (ibuffer-auto-mode 1)
            ;; Load the defined filter group
            (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  ;; (setq ibuffer-expert t)
#+END_SRC

Helper function to delete all the buffers except the current one
#+BEGIN_SRC emacs-lisp
  (defun kill-other-buffers ()
    "Kill all other buffers, but not the current one"
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

Use SHIFT + arrow keys to move between windows
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
#+END_SRC

Enable org-babel support for these languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (shell . t)
      (emacs-lisp . t)
      (js . t)
  ))
#+END_SRC

Enabling ox-gfm markdown export from org-mode
#+BEGIN_SRC emacs-lisp
  (eval-after-load "org"
    '(require 'ox-gfm nil t))
#+END_SRC

Enable typing y or n instead of yes and no
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC


* Modes

** ido-vertical-mode
Ido mode to show command completions everywhere
#+BEGIN_SRC emacs-lisp
(ido-mode t)
(ido-everywhere t)
(setq ido-enable-flex-matching t)
#+END_SRC

Use ido-vertical-mode
#+BEGIN_SRC emacs-lisp
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
(setq ido-vertical-show-count t)
#+END_SRC

#+RESULTS:
: t


** Markdown mode
Enable visual line mode
#+BEGIN_SRC emacs-lisp
(add-hook 'markdown-mode-hook 'visual-line-mode)
#+END_SRC



** dired-mode
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html#Dired][Dired]]
Use 'a' to visit a directory without creating a new buffer
#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

Copy recursively on C
#+BEGIN_SRC emacs-lisp
(setq dired-recursive-copies 'always)
#+END_SRC

dired-narrow starts fussy search with "/"
[[http://pragmaticemacs.com/emacs/dynamically-filter-directory-listing-with-dired-narrow/][dired-narrow]]
#+BEGIN_SRC emacs-lisp
(require 'dired)
(define-key dired-mode-map (kbd "/") 'dired-narrow-fuzzy)
#+END_SRC


** Magit
[[https://github.com/magit/magit/wiki/Cheatsheet][Magit Cheat Sheet]]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC



** Which-key
[[https://github.com/justbur/emacs-which-key][Which key]]
Minor mode displaying key bindings. Enter a shortcut and wait 1 second
to see available options
#+BEGIN_SRC emacs-lisp
(require 'which-key)
(which-key-mode)
;; Show VIM keys too
(setq which-key-allow-evil-operators t)
(setq which-key-show-operator-stage-maps t)
#+END_SRC


** Flycheck
[[http://www.flycheck.org/en/latest/][Flycheck]]
Syntax highlighting. Requires installing local linters e.g 'npm
install eslint'
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC


** Org-mode
[[https://orgmode.org/worg/doc.html][Orgmode]]
#+BEGIN_SRC emacs-lisp
(setq org-directory "/Volumes/Promise RAID/VersionControlled/org")

;; Setup all the agenda files
(setq org-agenda-files (list "/Volumes/Promise RAID/VersionControlled/org/todo.org"
			     "/Volumes/Promise RAID/VersionControlled/org/notes.org"
			     "/Volumes/Promise RAID/VersionControlled/org/projects.org"
			     "/Volumes/Promise RAID/VersionControlled/org/content.org"))

;; "M-x notes" to quickly open notes
(defun notes()
  (interactive)
  (find-file "/Volumes/Promise RAID/VersionControlled/org/notes.org"))

;; "M-x projects" to quickly open projects
(defun proj()
  (interactive)
  (find-file "/Volumes/Promise RAID/VersionControlled/org/projects.org"))

;; "M-x content" to quickly open projects
(defun content()
  (interactive)
  (find-file "/Volumes/Promise RAID/VersionControlled/org/content.org"))


;; Starts to bullets
(add-hook 'org-mode-hook (
   lambda()
     (org-bullets-mode 1)))

;; Adds a timestamp when a todo is marked as DONE
(setq org-log-done t)

(add-hook 'org-mode-hook 'auto-fill-mode)

;; Store link with "C-c l". Paste it with "C-c C-l"
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
;; Capture todo template (Create a todo: "C-c c t")
(define-key global-map (kbd "C-c c") 'org-capture)
;;(global-set-key (kbd "C-b") 'org-switchb)

;; Open agande in the current window
(setq org-agenda-window-setup (quote current-window))

(setq org-capture-templates
      '(("t" "todo" entry (file+headline "/Volumes/Promise RAID/VersionControlled/org/todo.org" "Todos")
	 "* TODO [#B] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")))


;; Configuring TODO states. These can be configured at the top of a file too.
(setq org-todo-keywords
  '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
;; Set faces for todos
(setq org-todo-keyword-faces '(("TODO" . (:foreground "#C2222D" :weight bold))
		      ("IN-PROGRESS" . (:foreground "#FFBF00" :weight bold))
		      ("WAITING" . (:foreground "#DE8ED5" :weight bold))
		      ("DONE" . (:foreground "#73D115" :weight bold))))

;; Set priorities
(setq org-highest-priority ?A)
(setq org-lowest-priority ?C)
(setq org-default-priority ?B)
;; Set priority faces
(setq org-priority-faces '((?A . (:foreground "#C2222D" :weight bold))
			   (?B . (:foreground "#FFBF00"))
			   (?C . (:foreground "#"))))

;; Set tag alignment for org-mode and org-agenda-mode
(setq org-tags-column (- 14 (window-body-width)))
(setq org-agenda-tags-column (- 14 (window-body-width)))
;; Align tags with "C-c C-c"
;;(add-hook 'org-ctrl-c-ctrl-c-hook 'org-align-all-tags)
;; Enable shift+arrow key to switch between windows if cursor is not in a special
;; place inside org window
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

#+RESULTS:
| windmove-right |

** ox-reveal
   Configuration options are set in #+REVEAL_INIT_OPTIONS on top of
   the document. All the available variables are documented in [[https://github.com/hakimel/reveal.js#configuration][Reveal.js repo]]
   The configuration defaults to a local clone instead of a CDN.
#+BEGIN_SRC emacs-lisp
  (load-library "ox-reveal")
  ;; (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-root "file:///Users/tommi/Documents/reveal.js")
  ;; Disable automatic title slide generation
  (setq org-reveal-title-slide nil)
#+END_SRC

** REST Client
[[https://github.com/pashky/restclient.el][Restclient]]



** Company

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
;; No delay in showing suggestions.
(setq company-idle-delay 1)
;; Show suggestions after entering 2 character2.
(setq company-minimum-prefix-length 2)
(setq company-selection-wrap-around t)
; Use tab key to cycle through suggestions.
; ('tng' means 'tab and go')
(company-tng-configure-default)
#+END_SRC

#+RESULTS:
: company-select-previous

** Dockerfile-mode
[[https://github.com/spotify/dockerfile-mode/tree/d31f7685ebc5832d957e25070a930aa42984327d][GitHub]]

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC


* Programming

** General

*** Tabs

#+BEGIN_SRC emacs-lisp
;; Tab width to 2
(setq-default tab-width 2)
;; Use spaces instead of a tab
(setq-default tab-width 2 indent-tabs-mode nil)
;; Indentation cannot insert tabs
(setq-default indent-tabs-mode nil)
#+END_SRC

JS indent level
#+BEGIN_SRC emacs-lisp
(setq js-indent-level 2)
#+END_SRC

Python indent level
#+BEGIN_SRC emacs-lisp
(setq python-indent 2)
#+END_SRC

Set CSS indent in html-mode
#+BEGIN_SRC emacs-lisp
(setq css-indent-offset 2)
#+END_SRC

Shell script indent
#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 2
                  sh-indentation 2)))
#+END_SRC

Web-mode
#+BEGIN_SRC emacs-lisp
(setq web-mode-markup-indent-offset 2)
#+END_SRC

Delete trailing whitespace when saving in all modes except
markdown-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook '(lambda()
  (when (not (or (derived-mode-p 'markdown-mode)))
    (delete-trailing-whitespace))))
#+END_SRC

Enable code folding for programming modes
#+BEGIN_SRC emacs-lisp
(defun enable-code-folding ()
  (hs-minor-mode)
  (local-set-key (kbd "C-z C-f") 'hs-hide-all)
  (local-set-key (kbd "C-z C-u") 'hs-show-all)
  (local-set-key (kbd "C-z C-b C-f") 'hs-hide-block)
  (local-set-key (kbd "C-z C-b C-u") 'hs-show-block))

(add-hook 'prog-mode-hook 'enable-code-folding)
#+END_SRC


** web-mode
Web-mode is a nice mode for editing HTML, CSS & JavaScript.
[[http://web-mode.org][Web-mode]]
#+BEGIN_SRC emacs-lisp
(defun web-mode-config ()
  ;; HTML indent
  (setq web-mode-markup-indent-offset 2)
  ;; CSS indent
  (setq web-mode-css-indent-offset 2)
  ;; JS indent
  (setq web-mode-script-padding 2)
  ;; Highlight current HTML element
  (setq web-mode-enable-current-element-highlight t)
  ;; Current column highlight
  (setq web-mode-enable-current-column-highlight t)
  ;; Enable auto pairing
  (setq web-mode-enable-auto-pairing t)
)

(add-hook 'web-mode-hook 'web-mode-config)
#+END_SRC

Switch to web-mode automatically to edit these files
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.hbs?\\'" . web-mode))
#+END_SRC


** YAML
Set mode to yaml-mode when opening .yml file.
#+BEGIN_SRC emacs-lisp
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+END_SRC


** JavaScript
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(setq js2-highlight-level 3)
;; Do not warn about missing semicolons
(setq js2-strict-missing-semi-warning nil)
#+END_SRC
